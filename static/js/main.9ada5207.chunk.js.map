{"version":3,"sources":["components/Tile.js","components/Result.js","components/App.js","serviceWorker.js","index.js"],"names":["Tile","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","_this$props$data","data","time","summary","temperatureHigh","icon","day","Date","getDay","react_default","a","createElement","Fragment","className","dist_default","animate","iconColor","style","width","height","Math","floor","Component","Result","content","currentData","shift","map","item","src_components_Tile","key","temperature","App","long","lat","componentDidMount","navigator","geolocation","getCurrentPosition","position","setState","coords","longitude","latitude","getData","_this2","api","concat","fetch","then","response","json","console","log","currently","daily","components_Result","target","href","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9ada5207.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Tile.css';\r\nimport Skycons from 'skycons-component'\r\n\r\nclass Tile extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {  }\r\n    }\r\n    componentDidMount(){\r\n    \r\n    }\r\n    render() { \r\n        const {time, summary,temperatureHigh, icon} = this.props.data;\r\n        const week = ['Niedziela','Poniedziałek', 'Wtorek', 'Środa', 'Czwartek', 'Piątek', 'Sobota'];\r\n        const day = week[new Date(time *1000).getDay()];\r\n        return ( \r\n            <>\r\n        <div className=\"tile\">\r\n        <h4>{day}</h4>\r\n        <Skycons\r\n      \t  \t animate={true}\r\n      \t iconColor='snow'\r\n      \t style={{width: 70, height: 70}}\r\n      \t icon={icon}\r\n       \t\t/>\r\n        <p>{Math.floor(temperatureHigh)} C °</p>\r\n        <p>{summary}</p>\r\n        </div>\r\n        </>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Tile;\r\n\r\n\r\n// const Tile = (props) => {\r\n    \r\n//     componentDidUpdate(){\r\n//         console.log('dziala')\r\n//     }\r\n//     return ( \r\n        \r\n//      );\r\n// }\r\n \r\n// export default Tile;","import React from 'react';\r\nimport Tile from './Tile';\r\nimport './Tile.css';\r\nimport Skycons from 'skycons-component'\r\n\r\n\r\nconst Result = (props) => {\r\nlet content = '';\r\nconst {data} = props;\r\nconst {currentData} = props;\r\nconst week = ['Niedziela','Poniedziałek', 'Wtorek', 'Środa', 'Czwartek', 'Piątek', 'Sobota'];\r\nif(data){ \r\n    data.shift();\r\n    content = (\r\n        content = data.map(item => <Tile key={item.time} data={item}/> ) \r\n        )\r\n}\r\n    return (\r\n        <>\r\n    {content ? <div className=\"current\">\r\n    <h4>Dzisiaj, {week[new Date(props.currentData.time *1000).getDay()]}</h4>\r\n    <Skycons\r\n      \t animate={true}\r\n      \t iconColor='snow'\r\n      \t style={{width: 70, height: 70}}\r\n      \t icon={currentData.icon}\r\n    />\r\n    <p className=\"current\">{Math.floor(currentData.temperature)} C °</p>\r\n    <p>{currentData.summary}</p>\r\n    </div> : ''}\r\n    <div className=\"tiles\">\r\n    {content ? content: <div className=\"animation\"> <div className=\"spinner\"></div> </div> }\r\n    </div>\r\n    \r\n        </>\r\n      );\r\n}\r\n \r\nexport default Result;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Result from './Result';\r\n\r\nclass App extends Component {\r\n    \r\n  state = {\r\n    data:null,\r\n    currentData:null,\r\n    long:'',\r\n    lat:'',\r\n  }\r\n\r\n  componentDidMount = () =>{\r\n      if(navigator.geolocation)\r\n      {\r\n        navigator.geolocation.getCurrentPosition(position => {\r\n          this.setState({\r\n            long:position.coords.longitude,\r\n            lat:position.coords.latitude,\r\n          })\r\n          this.getData()\r\n        });\r\n      }\r\n  }\r\n\r\n  getData(){\r\n      const proxy = 'https://cors-anywhere.herokuapp.com/';\r\n        const APIKey = `83f0299210404e4927b388bb5864b7c5`;\r\n        const api = `${proxy}https://api.darksky.net/forecast/${APIKey}/${this.state.lat},${this.state.long}?lang=pl&units=si`;\r\n        fetch(api)\r\n        .then(response => {\r\n            return response.json();\r\n        })\r\n        .then(response => {\r\n            console.log(response)\r\n            this.setState({\r\n              currentData: response.currently,\r\n              data: response.daily.data,\r\n            })\r\n        })\r\n    \r\n  }\r\n      \r\n  render() {\r\n    \r\n    return (\r\n      <div className=\"App\">\r\n      <Result data={this.state.data} currentData={this.state.currentData}/>\r\n      <h6>Powered by <a target=\"blank\" href=\"https://darksky.net/dev\">Dark Sky</a></h6>\r\n      <h6 className=\"photo\">Obraz <a target=\"blank\" href=\"https://pixabay.com/pl/users/PublicDomainPictures-14/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=164989\"> PublicDomainPictures</a> z <a target=\"blank\" href=\"https://pixabay.com/pl/?utm_source=link-attribution&amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=164989\"> Pixabay</a></h6>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}